/* Suffix Array */
/* Time Complexity suffixSort - O(N^2logN) getlcp - O(N^2)  */
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
#define mx 100000
string input ;
vector < pair<string,int> > SA ;
int lcp[mx+10] ;
void suffixSort()
{
    int N = input.size() ;
    for(int i=0;i<N;i++) SA.push_back(make_pair(input.substr(i),i));
    sort(SA.begin(),SA.end());
    cout << "After Sorting Suffixes ::\n" ;
    for(int i=0;i<N;i++) cout << SA[i].second << endl ;
}
void getlcp()
{
    int N = input.size();
    lcp[0] = 0 ;
    for(int i=1;i<N;i++)
    {
        lcp[i]=0;
        int j = 0 ;
        while(j<SA[i].first.size()&&j<SA[i-1].first.size()&&SA[i].first[j]==SA[i-1].first[j]) lcp[i]++ , j++ ;
    }
    cout << "Longest Common Prefix ::\n" ;
    for(int i=0;i<N;i++) cout << lcp[i] << endl ;
}
int main()
{
    cin >> input ;
    suffixSort();
    getlcp();
}
/*
abbcbba
*/
/*
After Sorting Suffixes ::
6
0
5
4
1
2
3
Longest Common Prefix ::
0
1
0
1
2
1
0
*/
