/* Suffix Array */
/* Time Complexity suffixSort - O(Nlog^2N) getlcp - O(NlogN)  */
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define mx 100000
struct info
{
    int tup[2] , index ;
    bool operator < (const info &A) const
    {
        return tup[0] == A.tup[0] ? tup[1] < A.tup[1] : tup[0] < A.tup[0] ;
    }
}SA[mx+10];
char input[mx+10] ;
int lcp[mx+10] , R[25][mx+10] , step ;
void suffixSort()
{
    int N = strlen(input);
    memset(R,-1,sizeof(R));
    for(int i=0;i<N;i++) R[0][i] = input[i] ;
    step=1;
    for(int jump=1;jump<=N;jump<<=1,step++)
    {
        for(int j=0;j<N;j++)
        {
            SA[j].index = j ;
            SA[j].tup[0] = R[step-1][j] ;
            SA[j].tup[1] = j+jump < N ? R[step-1][j+jump] : -1 ;
        }
        sort(SA,SA+N);
        R[step][SA[0].index] = 1 ;
        for(int j=1;j<N;j++)
        {
            R[step][SA[j].index] = SA[j].tup[0] == SA[j-1].tup[0] &&
                SA[j].tup[1] == SA[j-1].tup[1] ? R[step][SA[j-1].index] : R[step][SA[j-1].index]+1 ;
        }
    }
    puts("After Sorting Suffixes ::");
    for(int i=0;i<N;i++) printf("%d\n",SA[i].index);
}
void getlcp()
{
    int N = strlen(input);
    lcp[0] = 0 ;
    for(int i=1;i<N;i++)
    {
        lcp[i]=0;
        int indexN = SA[i].index ;
        int indexP = SA[i-1].index ;
        for(int j=step-1;j>=0;j--)
        {
            if(R[j][indexP]==R[j][indexN])
            {
                lcp[i]+=(1<<j);
                indexN+=(1<<j);
                indexP+=(1<<j);
            }
        }
    }
    puts("Longest Common Prefix ::");
    for(int i=0;i<N;i++) printf("%d\n",lcp[i]);
}
int main()
{
    scanf("%s",&input);
    suffixSort();
    getlcp();
}
/*
abbcbba
*/
/*
After Sorting Suffixes ::
6
0
5
4
1
2
3
Longest Common Prefix ::
0
1
0
1
2
1
0
*/
